input { 
	beats {  
		port => 5043
		id => beats
		#hostbeat => "client"
		add_field => { "[@metadata][typeso]" => "host" }
	} 
	
	beats {
		port => 5042
		id => beats_server
		add_field => { "[@metadata][typeso]" => "server" }
       }
} 


filter {
	#verifica se os dados são para psudonimizar
	if [@metadata][typeso] != "server"  { 
#Todos os beats possuem este campo
		if [agent][name] {
			clone {
				clones => [ 'clone_name_equip' ]	
				add_tag => [ "clone_name_equip" ]
			}
			#criação das variáveis que vão guardar os dados
			mutate {
				add_field => { 
					"[@metadata][name]" => "%{[agent][name]}"
					"[@metadata][name_uppercase]" => "%{[agent][name]}" 
					"[@metadata][name_lowercase]" => "%{[agent][name]}"
					"[@metadata][user]" => "-"
					"[@metadata][user_uppercase]" => "-"
					"[@metadata][user_lowercase]" => "-"
					"[@metadata][ip_orig]" => "-"
					"[@metadata][ip_orig_temp]" => "-"
				}
			}
			#criar o valor de hash para o nome do computador: agent.name
			fingerprint {
				source => "[agent][name]"
				target => "[@metadata][fingerprints]"
				method => "SHA256"
				key => "HMAC-SHA-256"
			}
			#verifica-se se existe o campo utilizador
			criar o valor de hash para o utilizador: user.name
			if [user][name] {
				fingerprint {
					source => "[user][name]"
					target => "[@metadata][fingerprintsus]"
					method => "SHA256"
					key => "HMAC-SHA-256"
				}
				#copiar o valor do campo user.name para as variáveis
				mutate {
					replace => { 
						"[@metadata][user]" => "%{[user][name]}" 
						"[@metadata][user_uppercase]" => "%{[user][name]}"
						"[@metadata][user_lowercase]" => "%{[user][name]}"
					}
					
				}
				#como se verificou que o nome do utilizador por vezes aparece em maiúsculas/minúsculas 				#transformamos o valor do utilizador para maiúsculas/minúsculas
				mutate {
					uppercase => [ "[@metadata][user_uppercase]" ]
				}
				mutate {
					lowercase => [ "[@metadata][user_lowercase]" ]
				}
			}
			#vai-se substituir o valor do campo original pelo valor da hash caso não se esteja perante a cópia
			if [user][name] and "clone_name_equip" not in [tags] {
				#substitui caso encontre uma correspondência no valor
				mutate {
					gsub => [ "[user][name]", "%{[@metadata][user_uppercase]}" , " %{[@metadata][fingerprintsus]} " ]
				}
				mutate {
					gsub => [ "[user][name]", "%{[@metadata][user]}" , " %{[@metadata][fingerprintsus]} " ]
				}
				mutate {
					gsub => [ "[user][name]", "%{[@metadata][user_lowercase]}" , " %{[@metadata][fingerprintsus]} " ]
				}
mutate {
					gsub => [ "[message]", "%{[@metadata][user_uppercase]}" , " %{[@metadata][fingerprintsus]} " ]
				}
				mutate {
					gsub => [ "[message]", "%{[@metadata][user]}" , " %{[@metadata][fingerprintsus]} " ]
				}
				mutate {
					gsub => [ "[message]", "%{[@metadata][user_lowercase]}" , " %{[@metadata][fingerprintsus]} " ]
				}

			
#criar o valor de hash para o ip: o host.ip
#foi necessário criar variáveis auxiliares pois o campo possui o IP4/IP&
			if [host][ip] {
				mutate {
					copy => { "[host][ip]" => "ip_orig_temp" }
				}
				
				mutate {
					split => [ "ip_orig_temp" , "," ]
					add_field => { "ip_testes" => "%{[ip_orig_temp][1]}" }
				}
				mutate {
					replace => { "[@metadata][ip_orig]" => "%{[ip_testes]}" }
				}
				
				fingerprint {
					source => "[host][ip]"
					target => "[@metadata][fingerprintsip]"
					method => "SHA256"
					key => "HMAC-SHA-256"
				}
				#vai-se substituir o valor IP pelo valor da hash caso não se esteja perante a cópia
				if "clone_name_equip" not in [tags] {
					mutate {
						add_field  => { "new_host_ip" => [ "1:1:1:1:1:1:1:1" , "1.1.1.1" ] }
					}
					#criar o campo onde se vai guardar o valor de hash
					mutate {
						add_field  => { "ip_orig_temp_key" =>  "%{[@metadata][fingerprintsip]}"}
					} 
					
					mutate {
						copy => {  "new_host_ip" =>   "[host][ip]"   }
					}
					mutate {
						gsub => [ "%{"[@metadata][ip_orig]}" , " %{[@metadata][fingerprintsip]} " ]
					}
					mutate {
						remove_field => [ "new_host_ip" , "ip_orig_temp" , "ip_testes" ]
					}
				}
			}
			if "clone_name_equip" not in [tags] {
				mutate {
					uppercase => [ "[@metadata][name_uppercase]" ]
				}
				mutate {
					lowercase => [ "[@metadata][name_lowercase]" ]
				}
				mutate {
					gsub => [ "[message]", "%{[agent][name]}" , " %{[@metadata][fingerprints]} " ]
				}
				mutate {	
					gsub => [ "[message]", "%{[@metadata][name_uppercase]}" , " %{[@metadata][fingerprints]} " ]
				}
				mutate {
					gsub => [ "[message]", "%{[@metadata][name_lowercase]}" , " %{[@metadata][fingerprints]} " ]
				}
				mutate {
					replace => { "[agent][name]" => "%{[@metadata][fingerprints]}" }
				}
			}
			#na copia realizada vamos guardar o valor do campo original e o valor hash 
			if "clone_name_equip" in [tags] {
				#remove todos os campos excepto o nome do equipamento
				mutate {
					 add_field => { "[@metadata][type]" => "clone_name_equip" }
				}
				#adiciona os campos originais e as suas chaves
				prune {
					interpolate => true
					whitelist_names => [ 'host.ip','type', '@timestamp' ]
					add_field => { "agent.name" => "%{[@metadata][name]}" }
					add_field => { "agent.name_key" => "%{[@metadata][fingerprints]}" } 
					add_field => { "agent.user" => "%{[@metadata][user]}" }
					add_field => { "agent.user_key" => "%{[@metadata][fingerprintsus]}" }
					add_field => { "agent.ip" => "%{[@metadata][ip_orig]}" }
					add_field => { "agent.ip_key" => "%{[@metadata][fingerprintsip]}" }
					add_field => { "resumo" => "%{[@metadata][name]} * %{[@metadata][user]} *  %{[@metadata][ip_orig]}" }
				}
				#cria um ID único para o campo resumo
				fingerprint {
					source => ["resumo"]
					target => "[@metadata][fingerprint_id]"
					method  => "MURMUR3"
				}
			}
		}
	}
}

output {
	if "clone_name_equip" not in [tags] {
		elasticsearch {
			hosts => ["https://IP_Elstic:9201"]
			user => "elastic"
			password => "*********"
			index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+yyyy.MM.dd}"
			ssl => true
			ssl_certificate_verification => false
			cacert => "/etc/logstash/client-ca.cer"
		}
	}
	if "clone_name_equip" in [tags] {
		elasticsearch {
			ssl => true
			ssl_certificate_verification => false
			hosts => ["IP_SEGUNDO_SERVIDOR:9201"]
			index => "data_key"
			document_id => "%{[@metadata][fingerprint_id]}"
			id => elasticsearch_datakey
			user => "logstash"
			password => "******"
			truststore => "/etc/logstash/keystore.jks"
			truststore_password => "readonlyrest"
	}
}



